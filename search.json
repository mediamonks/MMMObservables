{"Protocols/SimpleEventObserver.html#/simpleEventDidTrigger(_:)":{"name":"simpleEventDidTrigger(_:)","abstract":"<p>The exact instance of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/SimpleEventObservable.html\">SimpleEventObservable</a></code> that was used when subscribing to the event is passed so","parent_name":"SimpleEventObserver"},"Protocols/SimpleEventToken.html#/remove()":{"name":"remove()","abstract":"<p>Removes the corresponding observer. It is safe to call it more than once.","parent_name":"SimpleEventToken"},"Protocols/SimpleEventObservable.html#/ObserverBlock":{"name":"ObserverBlock","abstract":"<p>The argument of the closure is the object that was used with <code>addObserver()</code>.</p>","parent_name":"SimpleEventObservable"},"Protocols/SimpleEventObservable.html#/addObserver(_:_:)":{"name":"addObserver(_:_:)","abstract":"<p>Adds the given closure into the list of parties to be notified when the corresponding event happens.","parent_name":"SimpleEventObservable"},"Protocols/SimpleEventObservable.html#/addObserver(_:)":{"name":"addObserver(_:)","abstract":"<p>Adds a &ldquo;delegate-style&rdquo; observer into the list of parties to be notified when the corresponding event happens.","parent_name":"SimpleEventObservable"},"Protocols/SimpleEventObservable.html#/removeObserver(_:)":{"name":"removeObserver(_:)","abstract":"<p>Removes the observer added earlier via <code>addObserver()</code>. Should be called exactly once.</p>","parent_name":"SimpleEventObservable"},"Protocols/MMMObserverToken.html#/c:objc(pl)MMMObserverToken(im)removeObserver":{"name":"-removeObserver","abstract":"<p>Removes the observer associated with the token.</p>","parent_name":"MMMObserverToken"},"Protocols/MMMObserverToken.html":{"name":"MMMObserverToken","abstract":"<p>Sort of a cookie which can be returned by different addObserver methods."},"Protocols/SimpleEventObservable.html":{"name":"SimpleEventObservable","abstract":"<p>A point where multiple observers can register to be notified when the corresponding object or its parts"},"Protocols/SimpleEventToken.html":{"name":"SimpleEventToken","abstract":"<p>A token returned by <code>SimpleEventObservable.addObserver()</code> that can be used to remove the added observer either"},"Protocols/SimpleEventObserver.html":{"name":"SimpleEventObserver","abstract":"<p>Protocol for objects that want to be notified in a &ldquo;classic&rdquo; delegate-like manner when an event they subscribed to"},"Classes/LazySimpleEvent.html#/init(queue:)":{"name":"init(queue:)","abstract":"<p>The event is going to be scheduled on the specified queue.</p>","parent_name":"LazySimpleEvent"},"Classes/LazySimpleEvent.html#/addObserver(_:_:)":{"name":"addObserver(_:_:)","parent_name":"LazySimpleEvent"},"Classes/LazySimpleEvent.html#/addObserver(_:)":{"name":"addObserver(_:)","parent_name":"LazySimpleEvent"},"Classes/LazySimpleEvent.html#/removeObserver(_:)":{"name":"removeObserver(_:)","parent_name":"LazySimpleEvent"},"Classes/LazySimpleEvent.html#/trigger(if:)":{"name":"trigger(if:)","abstract":"<p>Marks the event as &lsquo;triggered&rsquo; so the observers are notified a bit later on the next run loop cycle","parent_name":"LazySimpleEvent"},"Classes/SimpleEvent.html#/init()":{"name":"init()","parent_name":"SimpleEvent"},"Classes/SimpleEvent.html#/addObserver(_:_:)":{"name":"addObserver(_:_:)","parent_name":"SimpleEvent"},"Classes/SimpleEvent.html#/addObserver(_:)":{"name":"addObserver(_:)","parent_name":"SimpleEvent"},"Classes/SimpleEvent.html#/removeObserver(_:)":{"name":"removeObserver(_:)","parent_name":"SimpleEvent"},"Classes/SimpleEvent.html#/coalescingNotifications(block:)":{"name":"coalescingNotifications(block:)","abstract":"<p>In case the event is &lsquo;triggered&rsquo; one or more times while in this block, then the observers will be","parent_name":"SimpleEvent"},"Classes/SimpleEvent.html#/trigger(if:)":{"name":"trigger(if:)","abstract":"<p>Marks the event as &lsquo;triggered&rsquo; if the given <code>condition</code> is <code>true</code>. Then, if the event is marked as &lsquo;triggered&rsquo;","parent_name":"SimpleEvent"},"Classes/ObserverHub.html#/isEmpty":{"name":"isEmpty","abstract":"<p>True, if no observers are installed yet.</p>","parent_name":"ObserverHub"},"Classes/ObserverHub.html#/add(_:)":{"name":"add(_:)","parent_name":"ObserverHub"},"Classes/ObserverHub.html#/remove(_:)":{"name":"remove(_:)","parent_name":"ObserverHub"},"Classes/ObserverHub.html#/forEach(_:)":{"name":"forEach(_:)","abstract":"<p>Calls the given closure for every observer currently subscribed.</p>","parent_name":"ObserverHub"},"Classes/ObserverHub.html#/init()":{"name":"init()","parent_name":"ObserverHub"},"Classes/SimpleEventGroupObserver/DebouncePolicy.html#/default":{"name":"default","abstract":"<p>A default <code>debounce</code> method, every time one of the events trigger, the timer will be reset.</p>","parent_name":"DebouncePolicy"},"Classes/SimpleEventGroupObserver/DebouncePolicy.html#/debounceLeading":{"name":"debounceLeading","abstract":"<p>The first time an event triggers, we call it straight away, but wait ignore all triggers for <code>debounceTimeout</code>.</p>","parent_name":"DebouncePolicy"},"Classes/SimpleEventGroupObserver/DebouncePolicy.html#/throttle":{"name":"throttle","abstract":"<p>Call events at most every <code>debounceTimeout</code> seconds.</p>","parent_name":"DebouncePolicy"},"Classes/SimpleEventGroupObserver/DebouncePolicy.html":{"name":"DebouncePolicy","abstract":"<p>What type of policy we should use for debouncing events.</p>","parent_name":"SimpleEventGroupObserver"},"Classes/SimpleEventGroupObserver.html#/init(events:debounceTimeout:debouncePolicy:block:)":{"name":"init(events:debounceTimeout:debouncePolicy:block:)","parent_name":"SimpleEventGroupObserver"},"Classes/SimpleEventGroupObserver.html#/remove()":{"name":"remove()","abstract":"<p>Removes the listeners.</p>","parent_name":"SimpleEventGroupObserver"},"Classes/SimpleEventGroupObserver.html#/simpleEventDidTrigger(_:)":{"name":"simpleEventDidTrigger(_:)","parent_name":"SimpleEventGroupObserver"},"Classes/SimpleMailbox.html#/init(event:)":{"name":"init(event:)","parent_name":"SimpleMailbox"},"Classes/SimpleMailbox.html#/value":{"name":"value","abstract":"<p>The current value, if any. Anyone can peek at it.</p>","parent_name":"SimpleMailbox"},"Classes/SimpleMailbox.html#/hasValue":{"name":"hasValue","abstract":"<p><code>true</code>, if there is a value in the mailbox. (Handy when the value itself is an optional.)</p>","parent_name":"SimpleMailbox"},"Classes/SimpleMailbox.html#/take()":{"name":"take()","abstract":"<p>Returns the current value in the mailbox, if any, taking it by leaving <code>nil</code> here.</p>","parent_name":"SimpleMailbox"},"Classes/SimpleMailbox.html#/replaceEvenIfSame(_:)":{"name":"replaceEvenIfSame(_:)","abstract":"<p>Puts a new value into the mailbox replacing the current value, if any.</p>","parent_name":"SimpleMailbox"},"Classes/SimpleMailbox.html#/placeIfFits(_:)":{"name":"placeIfFits(_:)","abstract":"<p>Puts a new value into the mailbox only if it&rsquo;s empty.</p>","parent_name":"SimpleMailbox"},"Classes/SimpleMailbox.html#/replace(_:)":{"name":"replace(_:)","abstract":"<p>Puts a new value into the mailbox replacing the current one and triggering a notification","parent_name":"SimpleMailbox"},"Classes/CoalescingCallback.html#/init(queue:block:)":{"name":"init(queue:block:)","parent_name":"CoalescingCallback"},"Classes/CoalescingCallback.html#/schedule()":{"name":"schedule()","abstract":"<p>Schedules the invocation of the block set when initializing the receiver.","parent_name":"CoalescingCallback"},"Classes/SimpleEventProxy.html#/init(queue:events:)":{"name":"init(queue:events:)","parent_name":"SimpleEventProxy"},"Classes/MMMObserverHub.html#/c:objc(cs)MMMObserverHub(im)initWithObservable:":{"name":"-initWithObservable:","abstract":"<p>Initialises with an optional object for which this observer hub is used.","parent_name":"MMMObserverHub"},"Classes/MMMObserverHub.html#/c:objc(cs)MMMObserverHub(im)init":{"name":"-init","abstract":"<p>Undocumented</p>","parent_name":"MMMObserverHub"},"Classes/MMMObserverHub.html#/c:objc(cs)MMMObserverHub(py)empty":{"name":"empty","abstract":"<p>YES, when no observers are added to the hub now. This is somewhat internal, but can be handy to know.</p>","parent_name":"MMMObserverHub"},"Classes/MMMObserverHub.html#/c:objc(cs)MMMObserverHub(im)safeAddObserver:":{"name":"-safeAddObserver:","abstract":"<p>Adds an observer and returns a token which should be used to remove it.","parent_name":"MMMObserverHub"},"Classes/MMMObserverHub.html#/c:objc(cs)MMMObserverHub(im)addObserver:":{"name":"-addObserver:","abstract":"<p>Adds an observer to the hub and returns YES.</p>","parent_name":"MMMObserverHub"},"Classes/MMMObserverHub.html#/c:objc(cs)MMMObserverHub(im)removeObserver:":{"name":"-removeObserver:","abstract":"<p>Removes an observer from the hub and returns YES.</p>","parent_name":"MMMObserverHub"},"Classes/MMMObserverHub.html#/c:objc(cs)MMMObserverHub(im)forEachObserver:":{"name":"-forEachObserver:","abstract":"<p>Runs the given block for each of the observers ensuring removals and additions of observers done meanwhile","parent_name":"MMMObserverHub"},"Classes/MMMObserverHub.html":{"name":"MMMObserverHub","abstract":"<p>Helps with implementation of observable objects where you need to ensure that add/remove observer"},"Classes/SimpleEventProxy.html":{"name":"SimpleEventProxy","abstract":"<p>You pass an array of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/SimpleEventObservable.html\">SimpleEventObservable</a></code>&lsquo;s and it fires a single event if one of them fires, it does this lazily.</p>"},"Classes/CoalescingCallback.html":{"name":"CoalescingCallback","abstract":"<p>Coalesces several calls of the same block on the given queue.</p>"},"Classes/SimpleMailbox.html":{"name":"SimpleMailbox","abstract":"<p>A box where somebody can put a value replacing whatever was there before, and somebody else can later check it"},"Classes/SimpleEventGroupObserver.html":{"name":"SimpleEventGroupObserver","abstract":"<p>You pass an array of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/SimpleEventObservable.html\">SimpleEventObservable</a></code>&lsquo;s and it listens to them all.</p>"},"Classes/ObserverHub.html":{"name":"ObserverHub","abstract":"<p>Helps with implementation of &ldquo;observable&rdquo; objects.</p>"},"Classes/SimpleEvent.html":{"name":"SimpleEvent","abstract":"<p>Helps to notify multiple parties about something interesting.</p>"},"Classes/LazySimpleEvent.html":{"name":"LazySimpleEvent","abstract":"<p>Another implementation of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/SimpleEventObservable.html\">SimpleEventObservable</a></code> that automatically coalesces all calls to <code>trigger()</code>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"}}